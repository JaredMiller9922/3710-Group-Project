module ps2_keyboard(
    input wire clk,           // System clock
    input wire rst,           // Reset signal
    input wire ps2_clk,       // PS/2 clock from the keyboard
    input wire ps2_data,      // PS/2 data from the keyboard
    output reg [7:0] data,    // 8-bit scan code
    output reg new_data       // Signal to indicate new data available
);

    // State variables
    reg [10:0] shift_reg;     // Shift register for capturing PS/2 frame
    reg [3:0] bit_count;      // Bit counter for 11-bit frame
    reg ps2_clk_prev;         // Previous PS/2 clock state

    // Clock edge detection for PS/2 clock
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            ps2_clk_prev <= 1'b1;
        end else begin
            ps2_clk_prev <= ps2_clk;
        end
    end

    wire ps2_clk_falling = (ps2_clk_prev == 1'b1 && ps2_clk == 1'b0);

    // Shift register and bit counter
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            shift_reg <= 11'b0;
            bit_count <= 4'b0;
            new_data <= 1'b0;
        end else if (ps2_clk_falling) begin
            if (bit_count < 11) begin
                // Shift in data on falling edge of PS/2 clock
                shift_reg <= {ps2_data, shift_reg[10:1]};
                bit_count <= bit_count + 1;
            end else begin
                // End of frame
                bit_count <= 0;
                if (shift_reg[0] == 1'b0 &&  // Start bit
                    ^shift_reg[9:1] == 1'b1 && // Odd parity
                    shift_reg[10] == 1'b1) // Stop bit
                begin
                    data <= shift_reg[8:1]; // Extract 8-bit data
                    new_data <= 1'b1;       // Indicate new data
                end else begin
                    new_data <= 1'b0;       // Invalid frame
                end
            end
        end else begin
            new_data <= 1'b0; // Clear new_data flag if not processing
        end
    end

endmodule
